{
  "version": 3,
  "sources": ["empty-module:@remix-run/node", "../../../app/routes/_index.tsx", "../../../app/components/chat/EnhancedChat.tsx", "../../../app/errors/AIServiceError.ts", "../../../app/utils/ErrorHandler.ts", "../../../app/utils/RetryManager.ts", "../../../app/utils/CircuitBreaker.ts", "../../../app/lib/services/ai/AIService.ts", "../../../app/lib/stores/chat.ts", "../../../app/components/chat/ConversationHistory.tsx", "../../../app/components/chat/GuidelinePanel.tsx", "../../../app/components/workspace/WorkspaceImport.tsx", "../../../app/lib/stores/workspace.ts", "../../../app/components/review/CodeReview.tsx", "../../../app/lib/stores/projectSettings.ts", "../../../app/lib/services/codeAnalysis.ts"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_index.tsx\");\n  import.meta.hot.lastModified = \"1737869880652.3967\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { lazy, Suspense } from 'react';\nimport { EnhancedChat } from '~/components/chat/EnhancedChat';\nimport { WorkspaceImport } from '~/components/workspace/WorkspaceImport';\nimport { CodeReview } from '~/components/review/CodeReview';\nimport LoadingSpinner from '../components/LoadingSpinner';\nconst CodeEditor = lazy(_c = () => import('../components/editor/CodeEditor'));\n_c2 = CodeEditor;\nconst Preview = lazy(_c3 = () => import('../components/workbench/Preview'));\n_c4 = Preview;\nexport const meta = () => {\n  return [{\n    title: \"Gobeze AI\"\n  }, {\n    name: \"description\",\n    content: \"Talk with Gobeze AI, your AI assistant\"\n  }];\n};\nexport const loader = () => json({});\nexport default function Workbench() {\n  return <div className=\"flex h-screen\">\n      <div className=\"w-1/4 border-r\">\n        <WorkspaceImport />\n      </div>\n      \n      <div className=\"flex-1 flex flex-col\">\n        <Suspense fallback={<LoadingSpinner />}>\n          <div className=\"flex-1\">\n            <CodeEditor />\n          </div>\n          <div className=\"h-1/2\">\n            <Preview />\n          </div>\n        </Suspense>\n      </div>\n      \n      <div className=\"w-1/4 border-l\">\n        <EnhancedChat />\n        <CodeReview />\n      </div>\n    </div>;\n}\n_c5 = Workbench;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"CodeEditor$lazy\");\n$RefreshReg$(_c2, \"CodeEditor\");\n$RefreshReg$(_c3, \"Preview$lazy\");\n$RefreshReg$(_c4, \"Preview\");\n$RefreshReg$(_c5, \"Workbench\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/chat/EnhancedChat.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/chat/EnhancedChat.tsx\");\n  import.meta.hot.lastModified = \"1737869880645.0571\";\n}\n// REMIX HMR END\n\nimport { useEffect, useRef, useState } from 'react';\nimport { useStore } from '@nanostores/react';\nimport { chatStore } from '~/lib/stores/chat';\nimport { ConversationHistory } from './ConversationHistory';\nimport { GuidelinePanel } from './GuidelinePanel';\nexport function EnhancedChat() {\n  _s();\n  const [input, setInput] = useState('');\n  const chatHistory = useStore(chatStore.history);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [chatHistory]);\n  return <div className=\"flex h-full\">\n      <div className=\"flex-1 flex flex-col\">\n        <ConversationHistory messages={chatHistory} />\n        <div className=\"flex-shrink-0 p-4 border-t\">\n          <textarea value={input} onChange={e => setInput(e.target.value)} className=\"w-full p-2 border rounded\" placeholder=\"Ask me anything about your code...\" />\n          <button onClick={() => chatStore.sendMessage(input)} className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\">\n            Send\n          </button>\n        </div>\n      </div>\n      <GuidelinePanel />\n    </div>;\n}\n_s(EnhancedChat, \"mNZrfdSFGOtuvy04n3LSqKSrcz0=\", false, function () {\n  return [useStore];\n});\n_c = EnhancedChat;\nvar _c;\n$RefreshReg$(_c, \"EnhancedChat\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/errors/AIServiceError.ts\"\n);\nimport.meta.hot.lastModified = \"1738206963587.5757\";\n}\n// REMIX HMR END\n\nexport class AIServiceError extends Error {\n  constructor(message: string, public readonly cause?: Error) {\n    super(message);\n    this.name = 'AIServiceError';\n  }\n} ", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/ErrorHandler.ts\"\n);\nimport.meta.hot.lastModified = \"1738207733871.948\";\n}\n// REMIX HMR END\n\nimport { Request, Response, NextFunction } from 'express';\nimport { AIServiceError } from '~/errors/AIServiceError';\nimport { createScopedLogger } from './logger';\n\nconst logger = createScopedLogger('ErrorHandler');\n\nexport class AppError extends Error {\n  constructor(\n    public statusCode: number,\n    public message: string,\n    public isOperational = true\n  ) {\n    super(message);\n    Object.setPrototypeOf(this, AppError.prototype);\n  }\n}\n\nexport const errorHandler = (\n  err: Error,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  if (err instanceof AppError) {\n    return res.status(err.statusCode).json({\n      status: 'error',\n      message: err.message,\n      ...(process.env.NODE_ENV === 'development' && { stack: err.stack }),\n    });\n  }\n\n  // Log unexpected errors\n  console.error('Unexpected error:', err);\n\n  // Send generic error response in production\n  res.status(500).json({\n    status: 'error',\n    message: process.env.NODE_ENV === 'production' \n      ? 'Internal server error' \n      : err.message,\n  });\n};\n\nexport const asyncHandler = (fn: Function) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\nexport class ErrorHandler {\n  static handle(error: unknown): void {\n    if (error instanceof AIServiceError) {\n      logger.error('AI Service Error:', error.message);\n      // Handle AI-specific errors\n      return;\n    }\n\n    if (error instanceof Error) {\n      logger.error('Application Error:', error.message);\n      // Handle general errors\n      return;\n    }\n\n    logger.error('Unknown Error:', error);\n  }\n\n  static async handleAsync<T>(promise: Promise<T>): Promise<T> {\n    try {\n      return await promise;\n    } catch (error) {\n      this.handle(error);\n      throw error;\n    }\n  }\n}", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/RetryManager.ts\"\n);\nimport.meta.hot.lastModified = \"1737871365533.2034\";\n}\n// REMIX HMR END\n\nimport type { RetryConfig } from '~/types/ai';\n\nexport class RetryManager {\n  constructor(private config: RetryConfig) {}\n\n  async execute<T>(fn: () => Promise<T>): Promise<T> {\n    let lastError: Error;\n    let delay = this.config.initialDelay;\n\n    for (let attempt = 1; attempt <= this.config.maxRetries; attempt++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error;\n        if (attempt === this.config.maxRetries) break;\n        \n        await this.delay(delay);\n        delay *= this.config.backoffFactor;\n      }\n    }\n\n    throw lastError;\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n} ", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/CircuitBreaker.ts\"\n);\nimport.meta.hot.lastModified = \"1737871365533.0837\";\n}\n// REMIX HMR END\n\nimport type { CircuitBreakerConfig } from '~/types/ai';\n\nexport class CircuitBreaker {\n  private failures: number = 0;\n  private lastFailureTime: number = 0;\n  private state: 'CLOSED' | 'OPEN' | 'HALF_OPEN' = 'CLOSED';\n\n  constructor(private config: CircuitBreakerConfig) {}\n\n  async ensureAvailable(): Promise<void> {\n    if (this.state === 'OPEN') {\n      if (Date.now() - this.lastFailureTime >= this.config.resetTimeout) {\n        this.state = 'HALF_OPEN';\n      } else {\n        throw new Error('Circuit breaker is open');\n      }\n    }\n  }\n\n  recordFailure(): void {\n    this.failures++;\n    this.lastFailureTime = Date.now();\n\n    if (this.failures >= this.config.failureThreshold) {\n      this.state = 'OPEN';\n    }\n  }\n\n  recordSuccess(): void {\n    if (this.state === 'HALF_OPEN') {\n      this.state = 'CLOSED';\n    }\n    this.failures = 0;\n  }\n} ", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/lib/services/ai/AIService.ts\"\n);\nimport.meta.hot.lastModified = \"1737871365503.2385\";\n}\n// REMIX HMR END\n\nimport { Container } from 'typedi';\nimport { NLPProcessor } from './processors/NLPProcessor';\nimport { KnowledgeGraph } from './knowledge/KnowledgeGraph';\nimport { InferenceEngine } from './reasoning/InferenceEngine';\nimport { ContextManager } from './context/ContextManager';\nimport { EmotionalProcessor } from './emotional/EmotionalProcessor';\nimport { CausalReasoner } from './reasoning/CausalReasoner';\nimport { WorkflowEngine } from './workflow/WorkflowEngine';\nimport { ErrorHandler } from '~/utils/ErrorHandler';\nimport { RetryManager } from '~/utils/RetryManager';\nimport { CircuitBreaker } from '~/utils/CircuitBreaker';\nimport type { \n  AIResponse, \n  ContextData, \n  ReasoningChain,\n  ProcessingStage,\n  ErrorMetadata\n} from '~/types/ai';\nimport { AIServiceError } from '~/errors/AIServiceError';\n\n@Service()\nexport class AIService {\n  private readonly retryManager: RetryManager;\n  private readonly circuitBreaker: CircuitBreaker;\n  private readonly errorHandler: ErrorHandler;\n\n  constructor(\n    private readonly nlpProcessor: NLPProcessor,\n    private readonly knowledgeGraph: KnowledgeGraph,\n    private readonly inferenceEngine: InferenceEngine,\n    private readonly contextManager: ContextManager,\n    private readonly emotionalProcessor: EmotionalProcessor,\n    private readonly causalReasoner: CausalReasoner,\n    private readonly workflowEngine: WorkflowEngine\n  ) {\n    this.retryManager = new RetryManager({\n      maxRetries: 3,\n      backoffFactor: 1.5,\n      initialDelay: 1000\n    });\n\n    this.circuitBreaker = new CircuitBreaker({\n      failureThreshold: 5,\n      resetTimeout: 60000\n    });\n\n    this.errorHandler = new ErrorHandler();\n  }\n\n  async processQuery(query: string, context: ContextData): Promise<AIResponse> {\n    const processingStages: ProcessingStage[] = [];\n    \n    try {\n      // Circuit breaker check\n      await this.circuitBreaker.ensureAvailable();\n\n      // 1. Process natural language and extract entities\n      const nlpResult = await this.executeWithRetry(\n        'nlp_processing',\n        async () => this.nlpProcessor.process(query, context),\n        { critical: true }\n      );\n      processingStages.push({ stage: 'nlp', result: nlpResult });\n\n      // 2. Build context understanding\n      const enrichedContext = await this.executeWithRetry(\n        'context_enrichment',\n        async () => this.contextManager.enrichContext({\n          query,\n          ...nlpResult,\n          ...context\n        })\n      );\n      processingStages.push({ stage: 'context', result: enrichedContext });\n\n      // 3. Perform causal and abductive reasoning\n      const reasoningChain = await this.executeWithRetry(\n        'reasoning',\n        async () => this.causalReasoner.analyze({\n          context: enrichedContext,\n          knowledgeGraph: this.knowledgeGraph\n        })\n      );\n      processingStages.push({ stage: 'reasoning', result: reasoningChain });\n\n      // 4. Generate workflow plan\n      const workflowPlan = await this.executeWithRetry(\n        'workflow_planning',\n        async () => this.workflowEngine.createPlan(reasoningChain)\n      );\n      processingStages.push({ stage: 'workflow', result: workflowPlan });\n\n      // 5. Execute workflow and gather results\n      const executionResults = await this.executeWithRetry(\n        'workflow_execution',\n        async () => this.workflowEngine.execute(workflowPlan)\n      );\n      processingStages.push({ stage: 'execution', result: executionResults });\n\n      // 6. Process emotional context\n      const emotionalContext = await this.executeWithRetry(\n        'emotional_processing',\n        async () => this.emotionalProcessor.analyze(query)\n      );\n      processingStages.push({ stage: 'emotional', result: emotionalContext });\n\n      // 7. Generate final response\n      return await this.executeWithRetry(\n        'response_generation',\n        async () => this.generateResponse({\n          results: executionResults,\n          reasoning: reasoningChain,\n          emotional: emotionalContext\n        })\n      );\n\n    } catch (error) {\n      // Handle errors with context\n      const errorMetadata: ErrorMetadata = {\n        query,\n        processingStages,\n        lastStage: processingStages[processingStages.length - 1]?.stage,\n        context: enrichedContext\n      };\n\n      // Record failure in circuit breaker\n      this.circuitBreaker.recordFailure();\n\n      // Handle error and generate fallback response\n      return this.handleProcessingError(error, errorMetadata);\n    }\n  }\n\n  private async executeWithRetry<T>(\n    operation: string,\n    fn: () => Promise<T>,\n    options: { critical?: boolean } = {}\n  ): Promise<T> {\n    try {\n      return await this.retryManager.execute(fn);\n    } catch (error) {\n      if (options.critical) {\n        throw new AIServiceError(\n          `Critical operation failed: ${operation}`,\n          error,\n          'CRITICAL_FAILURE'\n        );\n      }\n      // For non-critical failures, log and return fallback\n      this.errorHandler.handle(error, { operation });\n      return this.getFallbackResult(operation);\n    }\n  }\n\n  private async generateResponse(data: {\n    results: any;\n    reasoning: ReasoningChain;\n    emotional: any;\n  }): Promise<AIResponse> {\n    try {\n      return await this.inferenceEngine.generateResponse(data);\n    } catch (error) {\n      throw new AIServiceError('Response generation failed', error);\n    }\n  }\n\n  private async handleProcessingError(\n    error: Error,\n    metadata: ErrorMetadata\n  ): Promise<AIResponse> {\n    // Log error with context\n    this.errorHandler.handle(error, metadata);\n\n    // Generate graceful fallback response\n    return {\n      text: this.getErrorResponse(error, metadata),\n      reasoning: this.getFallbackReasoning(metadata),\n      confidence: 0.5,\n      suggestedActions: this.getFallbackActions(metadata)\n    };\n  }\n\n  private getErrorResponse(error: Error, metadata: ErrorMetadata): string {\n    // Generate user-friendly error message based on context\n    const stage = metadata.lastStage;\n    const templates = {\n      nlp: \"I'm having trouble understanding your request. Could you rephrase it?\",\n      context: \"I'm missing some context. Could you provide more details?\",\n      reasoning: \"I'm having trouble reasoning about this problem.\",\n      workflow: \"I couldn't create a plan to handle your request.\",\n      execution: \"I encountered an error while processing your request.\",\n      emotional: \"I couldn't properly analyze the context of your request.\",\n      default: \"An unexpected error occurred. Please try again.\"\n    };\n\n    return templates[stage] || templates.default;\n  }\n\n  private getFallbackReasoning(metadata: ErrorMetadata): ReasoningChain {\n    return {\n      steps: [{\n        type: 'deductive',\n        description: 'Fallback reasoning due to error',\n        evidence: [],\n        confidence: 0.5\n      }],\n      confidence: 0.5,\n      alternatives: []\n    };\n  }\n\n  private getFallbackActions(metadata: ErrorMetadata): Action[] {\n    return [{\n      type: 'error_recovery',\n      description: 'Try alternative approach',\n      parameters: {\n        suggestedAction: 'rephrase_request',\n        context: metadata.lastStage\n      }\n    }];\n  }\n\n  private getFallbackResult(operation: string): any {\n    // Provide sensible defaults for different operations\n    const fallbacks = {\n      nlp_processing: { entities: [], intent: { type: 'unknown', confidence: 0.5 } },\n      context_enrichment: { context: {}, confidence: 0.5 },\n      reasoning: { steps: [], confidence: 0.5 },\n      workflow_planning: { steps: [], fallback: true },\n      workflow_execution: { success: false, fallback: true },\n      emotional_processing: { sentiment: 'neutral', confidence: 0.5 }\n    };\n\n    return fallbacks[operation] || {};\n  }\n} ", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/lib/stores/chat.ts\"\n);\nimport.meta.hot.lastModified = \"1737869880656.2656\";\n}\n// REMIX HMR END\n\nimport { map } from 'nanostores';\nimport { AIService } from '../services/ai/AIService';\nimport type { Message } from '~/types/chat';\n\nconst aiService = new AIService();\n\nexport const chatStore = map<{\n  messages: Message[];\n  context: any;\n}>({\n  messages: [],\n  context: {}\n});\n\nexport async function sendMessage(content: string) {\n  const response = await aiService.processQuery(content, chatStore.get().context);\n  \n  chatStore.set({\n    messages: [\n      ...chatStore.get().messages,\n      {\n        role: 'user',\n        content\n      },\n      {\n        role: 'assistant',\n        content: response.text,\n        reasoning: response.reasoning\n      }\n    ],\n    context: response.context\n  });\n}\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/chat/ConversationHistory.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/chat/ConversationHistory.tsx\");\n  import.meta.hot.lastModified = \"1738207451007.2249\";\n}\n// REMIX HMR END\n\nimport React from 'react';\nimport { useStore } from '@nanostores/react';\nimport { chatStore } from '~/lib/stores/chat';\nexport const ConversationHistory = () => {\n  _s();\n  const chat = useStore(chatStore);\n  return <div className=\"flex flex-col gap-4 p-4 bg-gray-50 rounded-lg\">\n      <h2 className=\"text-lg font-semibold\">Conversation History</h2>\n      <div className=\"flex flex-col gap-2\">\n        {chat.messages.map((message, index) => <div key={index} className={`p-3 rounded-lg ${message.role === 'user' ? 'bg-blue-100' : 'bg-white'}`}>\n            <div className=\"font-medium\">{message.role === 'user' ? 'You' : 'Assistant'}</div>\n            <div className=\"mt-1\">{message.content}</div>\n          </div>)}\n      </div>\n    </div>;\n};\n_s(ConversationHistory, \"pgt61aUQRoUeT7qCxTcEar+0J8s=\", false, function () {\n  return [useStore];\n});\n_c = ConversationHistory;\nvar _c;\n$RefreshReg$(_c, \"ConversationHistory\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/chat/GuidelinePanel.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/chat/GuidelinePanel.tsx\");\n  import.meta.hot.lastModified = \"1738207461416.962\";\n}\n// REMIX HMR END\n\nimport React from 'react';\nexport const GuidelinePanel = () => {\n  return <div className=\"flex flex-col gap-4 p-4 bg-gray-50 rounded-lg\">\n      <h2 className=\"text-lg font-semibold\">Guidelines</h2>\n      <ul className=\"list-disc list-inside space-y-2\">\n        <li>Be clear and specific in your requests</li>\n        <li>Provide context when needed</li>\n        <li>Use code blocks for code snippets</li>\n        <li>Ask follow-up questions if needed</li>\n        <li>Report any issues or bugs</li>\n      </ul>\n      <div className=\"mt-4 text-sm text-gray-600\">\n        For more information, please refer to the documentation.\n      </div>\n    </div>;\n};\n_c = GuidelinePanel;\nvar _c;\n$RefreshReg$(_c, \"GuidelinePanel\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/workspace/WorkspaceImport.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/workspace/WorkspaceImport.tsx\");\n  import.meta.hot.lastModified = \"1737869880643.8135\";\n}\n// REMIX HMR END\n\nimport { useState } from 'react';\nimport { workspaceStore } from '~/lib/stores/workspace';\nexport function WorkspaceImport() {\n  _s();\n  const [importing, setImporting] = useState(false);\n  const handleVSCodeImport = async () => {\n    setImporting(true);\n    try {\n      await workspaceStore.importVSCodeWorkspace();\n    } finally {\n      setImporting(false);\n    }\n  };\n  const handleGitClone = async url => {\n    setImporting(true);\n    try {\n      await workspaceStore.cloneRepository(url);\n    } finally {\n      setImporting(false);\n    }\n  };\n  return <div className=\"p-4 space-y-4\">\n      <div>\n        <h3 className=\"text-lg font-semibold\">Import VSCode Workspace</h3>\n        <button onClick={handleVSCodeImport} disabled={importing} className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\">\n          Import from VSCode\n        </button>\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold\">Clone Repository</h3>\n        <input type=\"text\" placeholder=\"Repository URL\" className=\"w-full p-2 border rounded\" />\n        <button onClick={() => handleGitClone(repoUrl)} disabled={importing} className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\">\n          Clone Repository\n        </button>\n      </div>\n    </div>;\n}\n_s(WorkspaceImport, \"ryfmByDtNIuBZFMICTplBDWgCHQ=\");\n_c = WorkspaceImport;\nvar _c;\n$RefreshReg$(_c, \"WorkspaceImport\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/lib/stores/workspace.ts\"\n);\nimport.meta.hot.lastModified = \"1738207508241.176\";\n}\n// REMIX HMR END\n\nimport { map } from 'nanostores';\n\ninterface WorkspaceState {\n  path: string;\n  files: string[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: WorkspaceState = {\n  path: '',\n  files: [],\n  isLoading: false,\n  error: null\n};\n\nexport const workspaceStore = map<WorkspaceState>(initialState);\n\nexport const workspaceActions = {\n  setPath: (path: string) => {\n    workspaceStore.setKey('path', path);\n  },\n\n  setFiles: (files: string[]) => {\n    workspaceStore.setKey('files', files);\n  },\n\n  setLoading: (isLoading: boolean) => {\n    workspaceStore.setKey('isLoading', isLoading);\n  },\n\n  setError: (error: string | null) => {\n    workspaceStore.setKey('error', error);\n  },\n\n  async loadWorkspace(path: string) {\n    workspaceActions.setLoading(true);\n    workspaceActions.setError(null);\n\n    try {\n      workspaceActions.setPath(path);\n      // Here you would typically load files from the filesystem\n      // For now, we'll just simulate it\n      const files = ['package.json', 'README.md', 'src/index.ts'];\n      workspaceActions.setFiles(files);\n    } catch (error) {\n      workspaceActions.setError(error instanceof Error ? error.message : 'Failed to load workspace');\n    } finally {\n      workspaceActions.setLoading(false);\n    }\n  }\n}; ", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/review/CodeReview.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/review/CodeReview.tsx\");\n  import.meta.hot.lastModified = \"1737869880647.62\";\n}\n// REMIX HMR END\n\nimport { useState } from 'react';\nimport { useStore } from '@nanostores/react';\nimport { projectSettingsStore } from '~/lib/stores/projectSettings';\nimport { codeAnalysisService } from '~/lib/services/codeAnalysis';\nexport function CodeReview() {\n  _s();\n  const [analyzing, setAnalyzing] = useState(false);\n  const [results, setResults] = useState([]);\n  const settings = useStore(projectSettingsStore);\n  const runAnalysis = async () => {\n    setAnalyzing(true);\n    try {\n      const analysisResults = await codeAnalysisService.analyzeCode({\n        autoReview: settings.codeReviewSettings.autoReview,\n        minReviewers: settings.codeReviewSettings.minReviewers\n      });\n      setResults(analysisResults);\n    } finally {\n      setAnalyzing(false);\n    }\n  };\n  return <div className=\"p-4\">\n      <h2 className=\"text-xl font-bold mb-4\">Code Review</h2>\n      <button onClick={runAnalysis} disabled={analyzing} className=\"px-4 py-2 bg-blue-500 text-white rounded\">\n        Run Analysis\n      </button>\n\n      <div className=\"mt-4 space-y-4\">\n        {results.map((result, index) => <div key={index} className=\"p-4 border rounded\">\n            <h3 className=\"font-semibold\">{result.title}</h3>\n            <p className=\"text-gray-600\">{result.description}</p>\n            <div className=\"mt-2\">\n              {result.suggestions.map((suggestion, idx) => <div key={idx} className=\"text-sm text-gray-500\">\n                  \u2022 {suggestion}\n                </div>)}\n            </div>\n          </div>)}\n      </div>\n    </div>;\n}\n_s(CodeReview, \"jgVz1Geg6Tp8cY+MpqsnQHYZFEA=\", false, function () {\n  return [useStore];\n});\n_c = CodeReview;\nvar _c;\n$RefreshReg$(_c, \"CodeReview\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/lib/stores/projectSettings.ts\"\n);\nimport.meta.hot.lastModified = \"1737869880644.5603\";\n}\n// REMIX HMR END\n\nimport { map } from 'nanostores';\nimport { db } from '../persistence/db';\n\nexport interface ProjectSettings {\n  guidelines: string[];\n  context: string;\n  aiModel: string;\n  collaborators: string[];\n  codeReviewSettings: {\n    autoReview: boolean;\n    minReviewers: number;\n  };\n}\n\nexport const projectSettingsStore = map<ProjectSettings>({\n  guidelines: [],\n  context: '',\n  aiModel: 'claude-3-sonnet',\n  collaborators: [],\n  codeReviewSettings: {\n    autoReview: true,\n    minReviewers: 1\n  }\n});\n\nexport async function saveProjectSettings(settings: Partial<ProjectSettings>) {\n  await db.projectSettings.put(settings);\n  projectSettingsStore.set({\n    ...projectSettingsStore.get(),\n    ...settings\n  });\n} ", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/lib/services/codeAnalysis.ts\"\n);\nimport.meta.hot.lastModified = \"1738207489997.121\";\n}\n// REMIX HMR END\n\nimport { AIServiceError } from '~/errors/AIServiceError';\n\ninterface AnalysisResult {\n  complexity: number;\n  maintainability: number;\n  suggestions: string[];\n}\n\nclass CodeAnalysisService {\n  async analyzeCode(code: string): Promise<AnalysisResult> {\n    try {\n      // Basic analysis implementation\n      const complexity = this.calculateComplexity(code);\n      const maintainability = this.calculateMaintainability(code);\n      const suggestions = this.generateSuggestions(code);\n\n      return {\n        complexity,\n        maintainability,\n        suggestions\n      };\n    } catch (error) {\n      throw new AIServiceError('Failed to analyze code', error as Error);\n    }\n  }\n\n  private calculateComplexity(code: string): number {\n    // Simple complexity calculation based on code length and structure\n    const lines = code.split('\\n').length;\n    const conditionals = (code.match(/if|else|switch|case|for|while/g) || []).length;\n    return Math.min(10, Math.ceil((lines + conditionals * 2) / 10));\n  }\n\n  private calculateMaintainability(code: string): number {\n    // Simple maintainability calculation\n    const comments = (code.match(/\\/\\/|\\/\\*|\\*\\//g) || []).length;\n    const codeLength = code.length;\n    return Math.min(10, Math.ceil((comments * 100 / codeLength) + 5));\n  }\n\n  private generateSuggestions(code: string): string[] {\n    const suggestions: string[] = [];\n\n    // Basic code quality checks\n    if (code.length > 1000) {\n      suggestions.push('Consider breaking down the code into smaller functions');\n    }\n    if ((code.match(/console\\.log/g) || []).length > 3) {\n      suggestions.push('Remove unnecessary console.log statements');\n    }\n    if ((code.match(/TODO|FIXME/g) || []).length > 0) {\n      suggestions.push('Address TODO and FIXME comments');\n    }\n\n    return suggestions;\n  }\n}\n\nexport const codeAnalysisService = new CodeAnalysisService(); "],
  "mappings": "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",
  "names": ["import_react", "import_react", "enrichedContext", "import_jsx_dev_runtime", "_c", "import_jsx_dev_runtime", "_s", "_c", "import_react", "import_jsx_dev_runtime", "_s", "_c", "import_react", "import_jsx_dev_runtime", "_s", "_c", "import_jsx_dev_runtime", "_c", "_c2", "_c3", "_c4", "_c5", "_c", "_c2", "_c3", "_c4"]
}
