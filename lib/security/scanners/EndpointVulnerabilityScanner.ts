import { Service } from 'typedi';
import { EndpointValidationResult } from './EndpointScanner';

@Service()
export class EndpointVulnerabilityScanner {
  checkCommonVulnerabilities(
    route: { path: string; method: string },
    vulnerabilities: EndpointValidationResult['vulnerabilities']
  ): void {
    // Check for sensitive information in URL
    if (route.path.toLowerCase().includes('password') || route.path.toLowerCase().includes('token')) {
      vulnerabilities.push({
        id: 'sensitive-url-params',
        severity: 'high',
        description: 'Sensitive information should not be passed in URL parameters',
        remediation: 'Move sensitive data to request body or headers'
      });
    }

    // Check for unsafe HTTP methods on sensitive endpoints
    if (route.path.includes('/admin') && !['GET', 'HEAD'].includes(route.method)) {
      vulnerabilities.push({
        id: 'unsafe-admin-method',
        severity: 'medium',
        description: 'Unsafe HTTP method used on admin endpoint',
        remediation: 'Restrict admin endpoints to GET methods or implement proper authorization'
      });
    }

    // Check for potential information disclosure
    if (route.path.includes('/debug') || route.path.includes('/test')) {
      vulnerabilities.push({
        id: 'debug-endpoint-exposed',
        severity: 'medium',
        description: 'Debug or test endpoint exposed in production',
        remediation: 'Remove or disable debug/test endpoints in production'
      });
    }
  }

  async checkInjectionVulnerabilities(
    route: { path: string; method: string },
    vulnerabilities: EndpointValidationResult['vulnerabilities']
  ): Promise<void> {
    // Check for potential SQL injection points
    if (route.path.includes(':id') || route.path.includes('*')) {
      vulnerabilities.push({
        id: 'potential-sql-injection',
        severity: 'high',
        description: 'Endpoint accepts dynamic parameters that could be vulnerable to SQL injection',
        remediation: 'Implement proper parameter sanitization and use parameterized queries'
      });
    }

    // Check for potential NoSQL injection
    if (route.path.includes('query') || route.path.includes('filter')) {
      vulnerabilities.push({
        id: 'potential-nosql-injection',
        severity: 'high',
        description: 'Endpoint accepts query parameters that could be vulnerable to NoSQL injection',
        remediation: 'Implement proper input validation and sanitization for query parameters'
      });
    }

    // Check for potential command injection
    if (route.path.includes('exec') || route.path.includes('shell')) {
      vulnerabilities.push({
        id: 'potential-command-injection',
        severity: 'critical',
        description: 'Endpoint may execute system commands',
        remediation: 'Avoid system command execution or implement strict input validation'
      });
    }
  }

  checkAuthVulnerabilities(
    route: { path: string; method: string },
    authenticationRequired: boolean,
    vulnerabilities: EndpointValidationResult['vulnerabilities']
  ): void {
    // Check for missing authentication on sensitive endpoints
    if ((route.path.includes('/api/') || route.path.includes('/admin/')) && !authenticationRequired) {
      vulnerabilities.push({
        id: 'missing-authentication',
        severity: 'critical',
        description: 'Sensitive endpoint lacks authentication requirements',
        remediation: 'Implement authentication middleware for all sensitive endpoints'
      });
    }

    // Check for proper authorization
    if (route.path.includes('/user/') && route.method !== 'GET') {
      vulnerabilities.push({
        id: 'authorization-check-required',
        severity: 'high',
        description: 'User-specific endpoint requires proper authorization checks',
        remediation: 'Implement user-specific authorization checks'
      });
    }

    // Check for potential privilege escalation
    if (route.path.includes('/role') || route.path.includes('/permission')) {
      vulnerabilities.push({
        id: 'privilege-escalation-risk',
        severity: 'high',
        description: 'Endpoint modifies user roles or permissions',
        remediation: 'Implement strong authorization checks and audit logging'
      });
    }
  }
}