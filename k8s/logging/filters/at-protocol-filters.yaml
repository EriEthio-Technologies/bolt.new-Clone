apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-at-protocol-filters
  namespace: logging
data:
  at-protocol.conf: |
    # AT Protocol operations
    <filter kubernetes.**>
      @type parser
      key_name log
      reserve_data true
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key timestamp
          types operation_time:float,data_size:integer,latency:float
        </pattern>
      </parse>
      tag at_protocol
    </filter>

    # DID resolution metrics
    <filter kubernetes.**>
      @type record_transformer
      enable_ruby true
      <record>
        did_operation ${record.dig("message", "did_operation")}
        resolution_time ${record.dig("message", "resolution_time_ms")}
        did_type ${record.dig("message", "did_type")}
        cache_status ${record.dig("message", "cache_status")}
        verification_status ${record.dig("message", "verification_status")}
        resolver_endpoint ${record.dig("message", "resolver_endpoint")}
        error_code ${record.dig("message", "error_code")}
        retry_count ${record.dig("message", "retry_count")}
      </record>
    </filter>

    # Repository operations metrics
    <filter kubernetes.**>
      @type record_transformer
      enable_ruby true
      <record>
        repo_operation ${record.dig("message", "repo_operation")}
        repo_id ${record.dig("message", "repo_id")}
        operation_time ${record.dig("message", "operation_time_ms")}
        data_size ${record.dig("message", "data_size_bytes")}
        sync_status ${record.dig("message", "sync_status")}
        replication_lag ${record.dig("message", "replication_lag_ms")}
        consistency_level ${record.dig("message", "consistency_level")}
        node_count ${record.dig("message", "node_count")}
      </record>
    </filter>

    # Network metrics
    <filter kubernetes.**>
      @type record_transformer
      enable_ruby true
      <record>
        network_operation ${record.dig("message", "network_operation")}
        peer_count ${record.dig("message", "peer_count")}
        bandwidth_usage ${record.dig("message", "bandwidth_bytes")}
        protocol_version ${record.dig("message", "protocol_version")}
        connection_type ${record.dig("message", "connection_type")}
        latency ${record.dig("message", "latency_ms")}
        packet_loss ${record.dig("message", "packet_loss_percent")}
        throughput ${record.dig("message", "throughput_bps")}
      </record>
    </filter> 